//SPDX-License-Identifier:MIT
 pragma solidity ^0.8.11;

import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

 contract Lottery is VRFConsumerBase
 {
     address public manager;
     address payable[] public participants;
     bytes32 internal keyHash; // identifies which Chainlink oracle to use
     uint internal fee;        // fee to get random number
     uint public randomResult;
 
 constructor() VRFConsumerBase(
            0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF coordinator
            0x01BE23585060835E02B77ef475b0Cc51aA1e0709  // LINK token for your selected network
        ) {
            keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
            fee = 0.1 * 10 ** 18;    // 0.1 LINK

     manager = msg.sender;
 }

function getRandomNumber() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK in contract");
        return requestRandomness(keyHash, fee);
    }

//fulfillRandomWords(): Receives random values and stores them with your contract.
function fulfillRandomness(bytes32 requestId, uint randomness) internal override {
        randomResult = randomness;
        selectwinner();
    }
    
modifier onlyowner() {
      require(msg.sender == manager);
      _;
    }

function pickWinner() public onlyowner {
        getRandomNumber();
    }

 receive() external payable
 {   
     // to participate ,contribution of 1 Ether is required
     require(msg.value == 1 ether);
     participants.push(payable(msg.sender));
 }  
 function getBalance() public view returns (uint)
 { 
     require(msg.sender == manager);
     return address(this).balance;
 }



 function selectwinner() public{ 
  
  require(msg.sender == manager);
  
  // Number of participants must be atleast 3
  require(participants.length >= 3);
  uint r = randomResult;
  uint index = r % participants.length;
  address payable winner;
  winner = participants[index];
  winner.transfer(getBalance());
  participants = new address payable[](0);
  }

 }
