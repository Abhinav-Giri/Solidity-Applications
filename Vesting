//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract Vesting{

    struct Founder {
        uint amount;
        uint maturity;
        bool paid;

    }
    //structure is mapped to address
    mapping(address => Founder) public founders;
    address public admin;
    uint transactionValue;

    event eventWithdrawn(address addressused,uint amountis, string message);
    event addFounderEvent (address _founderEvent, uint _timeToMaturityEvent, string messageEvent);

    constructor() payable {
        admin = msg.sender;
        transactionValue = msg.value;

    }
    // The one who deploy can add his address and maturity details as founder
    function addFounder(address _founder, uint _timeToMature) external payable {
        require(_founder == admin, "Only admin can add a founder.");
        require(founders[_founder].amount == 0 ,"Founder already exists");

        founders[_founder] = Founder(transactionValue, block.timestamp + _timeToMature, false);

        emit addFounderEvent(_founder, _timeToMature, "Founder added,succesfully");

    }
    // Founder can withdraw his amount
    function withdraw() external payable {
        Founder storage founder = founders[msg.sender];

        require(founder.maturity <= block.timestamp, "Vesting period hasn't ended");
        require(founder.amount > 0);
        require(founder.paid == false," Already paid.");

        founder.paid = true;
        payable(msg.sender).transfer(founder.amount);
        emit eventWithdrawn(msg.sender, transactionValue, "amount withdrawn");


                
    }

}
