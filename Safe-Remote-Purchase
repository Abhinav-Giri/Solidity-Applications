//SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

contract PurchaseAgreement {

    //state variable declaration
    uint public amount;
    address payable public seller;
    address payable public buyer;

    //  enum restrict a variable to have one value out of few predefined values
    enum State {Created,Locked,Release,Inactive }
    State public state;

    constructor () payable {
        seller =payable(msg.sender);
        amount = msg.value / 2 ;
    }

    //The function cannot be called at the current state
    error InvalidState(); 
    //Only the buyer can call this function
    error OnlyBuyer() ; 
    //Only the buyer can call this function
    error OnlySeller() ;


    // Modifier allows you to control the behavior of your smart contract functions
    modifier inState(State state_) {
      if(state != state_) {
          revert InvalidState();
      }
      //t0 make it priority in while executing
      _;
    }
    
     modifier onlyBuyer() {
         if (msg.sender != buyer) {
         revert OnlyBuyer();
       }
     _;
    }

     modifier onlySeller() {
         if (msg.sender != seller) {
         revert OnlySeller();
       }
     _;
    }

       
    function confirmPurchase() external inState(State.Created) payable {
        require(msg.value == (2 * amount), "Please send 2 times the purchase amount");
        buyer = payable(msg.sender);
        state =State.Locked; 
    }
    function confirmReceived() external onlyBuyer  inState(State.Locked) {
        state =State.Release ;
        buyer.transfer(amount);
    }
    function paySeller() external onlySeller inState(State.Release) {
        state = State.Inactive ;
        seller.transfer(3 * amount) ;
    }

    function abort() external onlySeller inState(State.Created) {
        state =State.Inactive ;
        seller.transfer(address(this).balance) ;
    }

    
}
