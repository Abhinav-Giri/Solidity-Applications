// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

contract Multi_Call {

// parameter1:- in address array we are storing multiple function that needs to be called
// parameter2:- data that needs to pass to target
    function multiFuncCall(address[] calldata targets, bytes[] calldata data)
        external
        view
        returns (bytes[] memory)
    {
        require(targets.length == data.length, "target length is not equal to data length");
        
        //creating instance
        bytes[] memory results = new bytes[](data.length);

        for (uint i; i < targets.length; i++) {
            // as in function definition we used view,i.e. to read only purpose thats why used staticcall otherwise used call
            (bool success, bytes memory result) = targets[i].staticcall(data[i]);
            require(success, "call failed");
            results[i] = result;
        }

        return results;
    }
 }
 
 // testContract:- 
 
contract TestMultiCall {
    function test1() external pure returns (uint, uint) {
        return (1,block.timestamp);
    }
    function test2() external pure returns (uint, uint) {
        return (2,block.timestamp);

    function getData1() external pure returns (bytes memory) {
        return abi.encodeWithSelector(this.test1.selector);
    }
    function getData2() external pure returns (bytes memory) {
        // can also use abi.encodeWithSignature("func2()")
        return abi.encodeWithSelector(this.test2.selector);
    }
}
// both blocktime deployment will show same time of execution


//Code credit to : Tasuku Nakamura

